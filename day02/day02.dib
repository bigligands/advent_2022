#!fsharp

//Part 01

let input = File.ReadAllLines("input.txt")

let mutable score = 0

for line in input do
    let split = line.Split(" ")
    let (opponent, me) = (split[0], split[1])
    match opponent with
    | "A" -> 
        match me with
        | "X" -> score <- score + 1 + 3
        | "Y" -> score <- score + 2 + 6
        | "Z" -> score <- score + 3 + 0
    | "B" -> 
        match me with
        | "X" -> score <- score + 1 + 0
        | "Y" -> score <- score + 2 + 3
        | "Z" -> score <- score + 3 + 6
    | "C" -> 
        match me with
        | "X" -> score <- score + 1 + 6
        | "Y" -> score <- score + 2 + 0
        | "Z" -> score <- score + 3 + 3

printfn "%d" score

#!fsharp

//Part 02

let input = File.ReadAllLines("input.txt")

let mutable score = 0

for line in input do
    let split = line.Split(" ")
    let (opponent, me) = (split[0], split[1])
    match opponent with
    | "A" -> 
        match me with
        | "X" -> score <- score + 3 + 0
        | "Y" -> score <- score + 1 + 3
        | "Z" -> score <- score + 2 + 6
    | "B" -> 
        match me with
        | "X" -> score <- score + 1 + 0
        | "Y" -> score <- score + 2 + 3
        | "Z" -> score <- score + 3 + 6
    | "C" -> 
        match me with
        | "X" -> score <- score + 2 + 0
        | "Y" -> score <- score + 3 + 3
        | "Z" -> score <- score + 1 + 6

printfn "%d" score

#!fsharp

//Part 02 recursive

let input = File.ReadAllLines("input.txt") |> Array.toList

let get_score input =
    let rec analyze_game (input : list<string>) (acc : int) =
        match input with
            | head :: tail ->
                let split = head.Split(" ")
                let (opponent, me) = (split[0], split[1])
                match opponent with
                | "A" -> 
                    match me with
                    | "X" -> analyze_game tail (acc + 3 + 0)
                    | "Y" -> analyze_game tail (acc + 1 + 3)
                    | "Z" -> analyze_game tail (acc + 2 + 6)
                    | _ -> acc
                | "B" -> 
                    match me with
                    | "X" -> analyze_game tail (acc + 1 + 0)
                    | "Y" -> analyze_game tail (acc + 2 + 3)
                    | "Z" -> analyze_game tail (acc + 3 + 6)
                    | _ -> acc
                | "C" -> 
                    match me with
                    | "X" -> analyze_game tail (acc + 2 + 0)
                    | "Y" -> analyze_game tail (acc + 3 + 3)
                    | "Z" -> analyze_game tail (acc + 1 + 6)
                    | _ -> acc
                | _ -> acc
            | [] -> acc
    analyze_game input 0

let result = get_score input
printfn "%d" score
