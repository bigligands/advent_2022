#!fsharp

// Part 1

let input = File.ReadAllLines(@"input.txt")
let mutable sum = []
let mutable calories = []

for line in input do
    match line with
    | "" ->  // if line is empty string
        calories <- calories @ [List.sum sum] // append the Sum of the sum array to the calories array
        sum <- [0] // reset sum array to 0
    | num -> sum <- sum @ [num |> int] // append the value to the sum array

let most_calories = List.max calories // find the max value in the calory collection
printfn "most calories: %d" most_calories

#!fsharp

//Part 2

let input = File.ReadAllLines(@"input.txt")
let mutable sum = []
let mutable calories = []

for line in input do
    match line with
    | "" -> 
        calories <- calories @ [List.sum sum]
        sum <- [0]
    | num -> sum <- sum @ [num |> int]

let sorted_calories = List.sort calories // sort the list by value
let size = List.length sorted_calories // get usize
let accumulated_snacks = List.sum sorted_calories[size-3..size] // sum last 3 values
printfn "top 3 combined calories: %d" accumulated_snacks

#!fsharp

// Part 1 Recursive

let input = File.ReadAllLines(@"input.txt") |> Array.toList

let count_calories input  = 
    let rec count input acc calories = 
        match input with
        | head :: tail -> 
            match head with
            | "" -> 
                count tail 0 (calories @ [acc])
            | num -> count tail (acc + (num |> int)) calories
        | [] -> 
            calories
    count input 0 [0]
let result = count_calories input |> List.max
printfn "%A" result

#!fsharp

// Part 2 Recursive

let input = File.ReadAllLines(@"input.txt") |> Array.toList

let count_calories input  = 
    let rec count input acc calories = 
        match input with
        | head :: tail -> 
            match head with
            | "" -> 
                count tail 0 (calories @ [acc])
            | num -> count tail (acc + (num |> int)) calories
        | [] -> 
            calories
    count input 0 [0]
let result = count_calories input |> List.sort
let size = result.Length
let combined_result = result[size-3 .. size] |> List.sum
printfn "%d" combined_result
